{"mappings":"AAAA,uDAAuD;AACvD,MAAM,SAAS,SAAS,cAAc,CAAC;AACvC,MAAM,MAAM,OAAO,UAAU,CAAC;AAE9B,uCAAuC;AACvC,IAAI,OAAO,OAAO,KAAK,GAAG,GAAI,oCAAoC;AAClE,IAAI,OAAO,OAAO,MAAM,GAAG;AAC3B,IAAI,QAAQ,GAAkB,gDAAgD;AAC9E,MAAM,QAAQ,KAAK,kCAAkC;AAErD,yCAAyC;AACzC,MAAM,UAAU,SAAS,cAAc,CAAC;AACxC,MAAM,WAAW,SAAS,cAAc,CAAC;AAEzC,qCAAqC;AACrC,QAAQ,gBAAgB,CAAC,SAAS;IAChC,uDAAuD;IACvD,SAAS,KAAK,EAAE,GAAG,GAAG,+BAA+B;AACvD;AAEA,SAAS,gBAAgB,CAAC,SAAS;IACjC,iDAAiD;IACjD,SAAS,KAAK,EAAE,GAAG;AACrB;AAEA,0DAA0D;AAC1D,SAAS;IACP;IACA;IACA,QAAQ,GAAG,CAAC,iBAAiB,MAAM,OAAO,0BAA0B;IACpE,sBAAsB;AACxB;AAEA,6DAA6D;AAC7D,SAAS;IACP,oCAAoC;IACpC,mCAAmC;IACnC,mCAAmC;IAEnC,sEAAsE;IACtE,IAAI,OAAO,GAAG,OAAO,OAAO,KAAK;IACjC,IAAI,OAAO,OAAO,KAAK,EAAE,OAAO;IAChC,IAAI,OAAO,GAAG,OAAO,OAAO,MAAM;IAClC,IAAI,OAAO,OAAO,MAAM,EAAE,OAAO;AACnC;AAEA,sCAAsC;AACtC,SAAS;IACP,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;IAC/C,IAAI,SAAS,GAAG;IAChB,IAAI,QAAQ,CAAC,OAAO,IAAI,OAAO,IAAI,IAAI,KAAK,6BAA6B;AAC3E;AAEA,2BAA2B;AAC3B","sources":["src/main.ts"],"sourcesContent":["// Get references to the canvas and its drawing context\nconst canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\n// Define properties for the yellow dot\nlet dotX = canvas.width / 2;  // Start at the center of the canvas\nlet dotY = canvas.height / 2;\nlet angle = 0;                // Angle in radians; 0 means moving to the right\nconst speed = 0.5; // Slow down the dot for debugging\n\n// Get the left and right button elements\nconst leftBtn = document.getElementById('leftBtn') as HTMLButtonElement;\nconst rightBtn = document.getElementById('rightBtn') as HTMLButtonElement;\n\n// Add event listeners to the buttons\nleftBtn.addEventListener('click', () => {\n  // Turn left by subtracting from the angle (in radians)\n  angle -= Math.PI / 8; // 22.5Â° turn; adjust as needed\n});\n\nrightBtn.addEventListener('click', () => {\n  // Turn right by adding to the angle (in radians)\n  angle += Math.PI / 8;\n});\n\n// The main game loop: update dot position, then render it\nfunction gameLoop() {\n  update();\n  render();\n  console.log(\"Dot position:\", dotX, dotY); // Debug: log the position\n  requestAnimationFrame(gameLoop);\n}\n\n// Update the dot's position based on its speed and direction\nfunction update() {\n  // Comment out movement for testing:\n  // dotX += speed * Math.cos(angle);\n  // dotY += speed * Math.sin(angle);\n\n  // Wrap the dot around the edges of the canvas for continuous movement\n  if (dotX < 0) dotX = canvas.width;\n  if (dotX > canvas.width) dotX = 0;\n  if (dotY < 0) dotY = canvas.height;\n  if (dotY > canvas.height) dotY = 0;\n}\n\n// Render (draw) the dot on the canvas\nfunction render() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = 'yellow';\n  ctx.fillRect(dotX - 10, dotY - 10, 20, 20); // Draw a 20x20 yellow square\n}\n\n// Start the animation loop\ngameLoop();\n"],"names":[],"version":3,"file":"index.bc9084ba.js.map","sourceRoot":"/__parcel_source_root/"}